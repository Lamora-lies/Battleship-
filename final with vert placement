//program for playing battleship
// Will Moynihan
// Elizabeth Dyer
// CSC 160
using namespace std;
#include <iostream>
#include <iomanip>
#include <windows.h> 
const int ARRAYSIZE = 100; //size of array for showArray and hitArray. 
// all variables formatted shipNumber are variables holding the size of the available ships
const int shipOne = 5;
const int shipTwo = 4; // this variable is used twice for ship placement
const int shipThree = 3;
const int shipFour = 2;
int shipCount = 0; //counts number of "S"s in the array, used to check if the game is over
int hitCount = 0; //counts the number of hits the player has accumulated


void showBoard(char myArray[], char letterArray[])//function to output the board that the player sees. 
{
	cout << "\n";
	cout << "     ";
	/*
	each for loop outputs a an 8 character chunk of the boardArray
	*/
	for (int k = 0; k < 10; k++) //outputs the letter array
	{
		cout << letterArray[k] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "0" << setw(5);
	/*
	each for loop outputs a an 8 character chunk of the boardArray. It's setup like this for the sake of neatness in
	the board. It creates an 10x10 grid instead of a single line
	*/
	for (int i = 0; i < 10; i++)
	{
		cout << myArray[i] << setw(5);
	}

	cout << "\n"; cout << "\n";
	cout << "1" << setw(5);
	for (int i = 10; i < 20; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "2" << setw(5);
	for (int i = 20; i < 30; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "3" << setw(5);
	for (int i = 30; i < 40; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "4" << setw(5);
	for (int i = 40; i < 50; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "5" << setw(5);
	for (int i = 50; i < 60; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "6" << setw(5);
	for (int i = 60; i < 70; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "7" << setw(5);
	for (int i = 70; i < 80; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "8" << setw(5);
	for (int i = 80; i < 90; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";
	cout << "9" << setw(5);
	for (int i = 90; i < 100; i++)
	{
		cout << myArray[i] << setw(5);
	}
	cout << "\n"; cout << "\n";

}
void hitCheckRepeat(char hitArray[], int hitCheck)
// function to check if coordinates have already been entered, and to take new coordinates if so
{
	if (hitArray[hitCheck] == 'X' || hitArray[hitCheck] == 'M')
	{
		cout << "You've already entered this coordinate! It was a ";
		if (hitArray[hitCheck] == 'X')
		{
			cout << "hit!\n";
		}
		else
		{
			cout << "miss! \n";
		}


	}

}
char hitCheckChar(char letCoor) //checks if a legal character has been entered, and takes a new one if not
{

	while (letCoor != 'a' && letCoor != 'b' && letCoor != 'c' && letCoor != 'd' && letCoor != 'e' &&
		letCoor != 'f' && letCoor != 'g' && letCoor != 'h' && letCoor != 'i' && letCoor != 'j')
	{
		cout << "Illegal letter coordinate. Please re-enter letter coordinate: ";
		cin >> letCoor;
		return letCoor;
	}
	return letCoor;
}

int hitCheckNum(int numCoor) //checks to see if a legal number has been entered, and takes a new number if not
{
	while (numCoor > 9 || numCoor < 0)
	{
		cout << "Illegal numeric entry. Please try again: ";
		cin >> numCoor;
		return numCoor;
	}
	return numCoor;
}


char enterLetterCoordinate() //function takes a user entered letter as part of a hit coordinate
{
	char letCoor = 'z'; //user entered coordinate corresponding to a location in hitArray
	cout << "Please enter a lowercase letter coordinate between a and j: ";
	cin >> letCoor;
	letCoor = hitCheckChar(letCoor);
	return letCoor;
}
int enterNumberCoordinate() //function takes a user entered number as part of a hit coordinate
{
	int numberCoor = -1; //user entered number coordinate corresponding to a location in hitArray
	cout << "Please enter a number between 0 and 9: ";
	cin >> numberCoor;
	numberCoor = hitCheckNum(numberCoor);
	return numberCoor;

}

int genRand()//function generates a random number between 8 and 64.
{

	srand(time(NULL)); //sets the seed for rand as the current system time
	int test = rand() % 100 + 1;//create int test and assign it the random number value between 1 and 64
	return test;
}

int shipCheckLegal(char hitArray[], int coorOne, int shipSize)
//function used to check if a ship has already been placed in the anticipated location used by placeShip
{

	int count = 0; //count tracks the number of overlaps in ship placement
	for (int i = coorOne; i < shipSize; i++)
	{
		if (hitArray[i] == 'S')
		{
			count++;
		}
		//each time the loop encounters an S, it increments count
	}
	return count;
}
 int placeVertLegal(char hitArray[], int coorOne, int shipSize)
{
	int count = 0; 
	
	int coorTest = coorOne;
		for (int i = 0; i < shipSize; i++)
	{
		if (hitArray[coorTest] == 'S')
		{
			count++;
		}
		
		if (coorOne >= ARRAYSIZE)
		{
			count++;
		}
		coorTest += 10;
	}
		return count;
		
}

void placeShipsVert(char hitArray[], int coorOne, int shipSize)
{
		int vertTest = placeVertLegal(hitArray, coorOne, shipSize);
   // vertTest checks if there is already a ship in the area currently being used
	
	if (vertTest > 0);
	{
		while (vertTest > 0)
		{
			coorOne = rand() % 100 + 1;
			int vertTest = placeVertLegal(hitArray, coorOne, shipSize);
		}
	}
		
		for (int i = 0; i < shipSize; i++)
			//iterates through the array starting at Coordinate one, adds 8 and then changes each indice it goes 
			//through to an S to mark a ship placement. Adds to shipcount as well to keep track
			//of how many hits the player needs to win 
		{

			hitArray[coorOne] = 'S';
			coorOne += 10;
			shipCount++;
		}
	
} 
void placeShips(char hitArray[], int shipSize)//function used to place ships onto the hit array
{
	int dice = rand() % 12;
	
	int coorOne = rand() % 100 + 1; //coordinate used to determine ships starting place in hit array
	while (coorOne + shipSize > ARRAYSIZE)
		//this loops check if the ship size plus the randomly generated number
		//assigned to coorOne is greater than the size of the array in order to prevent overrun errors
		// or a tragic loss of life at sea. 
	{
		coorOne = rand() % 100 + 1;
	}
	if (dice > 6)
	{
		placeShipsVert(hitArray, coorOne, shipSize);
	}

	int shipTest = shipCheckLegal(hitArray, coorOne, shipSize);
	//if shiptest is greater than one, that means that there's already a ship in part of the array that's been slated
	//for ship placement. The following while loop assigns a new value to coorOne and re checks it until the space is
	//clear
	while (shipTest > 0)
	{
		coorOne = rand() % 100 + 1;
		shipCheckLegal(hitArray, coorOne, shipSize);
	}

	for (int i = 0; i < shipSize; i++)//iterates through the array starting at Coordinate one and changing each indice
		//it goes through to an S to mark a ship placement
	{
		hitArray[coorOne] = 'S';
		coorOne++;
		shipCount++;

	}
}

void hitOrMiss(char showArray[], char hitArray[])
// function takes user input and determines if a given coordinate is a hit or a miss
{
	char letCoor;// player entered letter coordinate
	int convCoord = 1;// player entered letter coordinate after being translated to an integer value
	int numCoor; // player entered number coordinate 
	letCoor = enterLetterCoordinate();
	hitCheckChar(letCoor);
	numCoor = enterNumberCoordinate();
	hitCheckNum(numCoor);
	// if statements convert a-h into a corresponding 0-9 number value. 
	if (letCoor == 'a')
	{
		convCoord = 0;
	}
	else if (letCoor == 'b')
	{
		convCoord = 1;
	}
	else if (letCoor == 'c')
	{
		convCoord = 2;
	}
	else if (letCoor == 'd')
	{
		convCoord = 3;
	}
	else if (letCoor == 'e')
	{
		convCoord = 4;
	}
	else if (letCoor == 'f')
	{
		convCoord = 5;
	}
	else if (letCoor == 'g')
	{
		convCoord = 6;
	}
	else if (letCoor == 'h')
	{
		convCoord = 7;
	}
	else if (letCoor == 'i')
	{
		convCoord = 8;
	}
	else if (letCoor == 'j')
	{
		convCoord = 9;
	}

	int hitCheck = (numCoor * 10) + convCoord;
	hitCheckRepeat(hitArray, hitCheck);
	// hitCheck holds the value that will translate into a location on the array.
	// the formula is: multiply the given numeric coordinate by 10 which gets you to the correct line
	// and then add the converted letter value, which gets you to the correct column.
	if (hitArray[hitCheck] == 'S')
		//if the array has an S, which means there's a ship there, it outputs a hit statement and changes the 
		//hitarray and boardarray to reflect the hit

	{
		cout << "It's a hit! \n";
		showArray[hitCheck] = 'X';
		hitArray[hitCheck] = 'X';
		hitCount++;
	}
	else if (hitArray[hitCheck] != 'H' && hitArray[hitCheck] != 'X')
	{
		//if the array has an H or X, which means there's a ship there, it outputs a miss statement and changes the 
		//hitarray and boardarray to reflect the miss
		cout << "It's a miss! \n";
		hitArray[hitCheck] = 'M';
		showArray[hitCheck] = 'M';
	}


}



int main()
{
	char boardLet[10] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G','H', 'I', 'J' }; //letter labels array
	char showArray[ARRAYSIZE] = //array used as the board display
	{
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*'
	};
	char hitArray[ARRAYSIZE] = //array used to hold ships and calculate hits and misses
	{
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*',
		'*', '*', '*', '*', '*', '*', '*','*','*','*'
	};
	int test = rand() % 100 + 1;
	
	char playAgain = 'y'; //variable controls the loop allowing for replay. Set to yes so it always runs at least once
	while (playAgain == 'y')
		//outerwhile controls if the player wants to play again, while the inner while actually plays the game.
	{

		placeShips(hitArray, shipOne);
		placeShips(hitArray, shipTwo);
		placeShips(hitArray, shipThree);
		placeShips(hitArray, shipFour);
		cout << endl;	
		while (hitCount < shipCount)
		{
			showBoard(showArray, boardLet);
			cout << "\n";
			hitOrMiss(showArray, hitArray);

		}
		cout << "\n Do you want to play again y/n: ";
		cin >> playAgain;
	} 
	
	
	cout << endl << "Good game and thanks for playing Battleship! \n";
	system("pause");
}
